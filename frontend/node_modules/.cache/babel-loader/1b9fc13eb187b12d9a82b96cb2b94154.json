{"ast":null,"code":"import { PROJECT_CREATE_FAIL, PROJECT_CREATE_REQUEST, PROJECT_CREATE_SUCCESS, PROJECT_DATA_FAIL, PROJECT_DATA_MOVE_TASK, PROJECT_DATA_REQUEST, PROJECT_DATA_SUCCESS, PROJECT_DATA_UPDATE_LABELS, PROJECT_DATA_UPDATE_LISTS, PROJECT_FIND_USERS_FAIL, PROJECT_FIND_USERS_REQUEST, PROJECT_FIND_USERS_SUCCESS, PROJECT_RESET_NEW_MESSAGE, PROJECT_SET_CURRENT, PROJECT_SET_MESSAGES, PROJECT_SET_TASK_FAIL, PROJECT_SET_TASK_REQUEST, PROJECT_SET_TASK_SUCCESS, PROJECT_TASK_MOVE, PROJECT_TASK_MOVE_RESET, PROJECT_TODO_VISIBILITY_UPDATE } from '../constants/projectConstants';\nimport { USER_DATA_UPDATE } from '../constants/userConstants';\nimport { BACKGROUND_COLORS } from '../../util/colorsContants';\nimport axios from 'axios';\nimport deepcopy from 'deepcopy';\nimport { getTaskIndexes } from '../../util/utilFunctions';\nexport const createProject = (title, callback) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PROJECT_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(userInfo.token)\n      }\n    };\n    // set random background for new project\n    const background = BACKGROUND_COLORS[Math.floor(Math.random() * Math.floor(5))];\n    const {\n      data\n    } = await axios.post('/api/projects/', {\n      title,\n      background\n    }, config);\n    callback(data.project._id);\n    const userInfoClone = Object.assign({}, userInfo);\n    userInfoClone.projectsCreated.push(data.project);\n    userInfoClone.projectsThemes[data.project._id] = {\n      background\n    };\n    // Update user's projects and set current project\n    dispatch({\n      type: USER_DATA_UPDATE,\n      payload: userInfoClone\n    });\n    dispatch({\n      type: PROJECT_SET_CURRENT,\n      payload: data.project\n    });\n    dispatch({\n      type: PROJECT_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROJECT_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getProjectData = (projectId, prevProjectId) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PROJECT_DATA_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      },\n      socketConnection: {\n        socket\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(userInfo.token)\n      }\n    };\n\n    // join and leave socket's project board room\n    if (prevProjectId) socket.emit('disconnect-board', {\n      room: prevProjectId\n    });\n    socket.emit('join-board', {\n      room: projectId\n    });\n    const {\n      data: {\n        project,\n        labels,\n        lists,\n        messages\n      }\n    } = await axios.get(\"/api/projects/\".concat(projectId), config);\n    dispatch({\n      type: PROJECT_DATA_SUCCESS,\n      payload: {\n        project,\n        labels,\n        lists\n      }\n    });\n    dispatch({\n      type: PROJECT_SET_MESSAGES,\n      payload: messages\n    });\n  } catch (error) {\n    dispatch({\n      type: PROJECT_DATA_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Action used to emit to the socket 'task-move' event for other clients\n// and also prepare and dispatch data for local task move\nexport const projectTaskMove = (dropResult, listIndex, projectId, task) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectTaskMove: {\n      added,\n      removed\n    }\n  } = getState();\n  const emitTaskMove = (added, removed) => {\n    dispatch({\n      type: PROJECT_DATA_MOVE_TASK,\n      payload: {\n        added,\n        removed,\n        task\n      }\n    });\n    socket.emit('task-move', {\n      added,\n      removed,\n      taskId: task._id,\n      projectId\n    });\n    dispatch({\n      type: PROJECT_TASK_MOVE_RESET\n    });\n  };\n  if (dropResult.removedIndex !== null && dropResult.addedIndex !== null) {\n    emitTaskMove({\n      index: dropResult.addedIndex,\n      listIndex\n    }, {\n      listIndex,\n      index: dropResult.removedIndex\n    }, projectId);\n  } else if (dropResult.removedIndex !== null) {\n    added ? emitTaskMove(added, {\n      listIndex,\n      index: dropResult.removedIndex\n    }, projectId) : dispatch({\n      type: PROJECT_TASK_MOVE,\n      payload: {\n        added: false,\n        removed: {\n          listIndex,\n          index: dropResult.removedIndex\n        }\n      }\n    });\n  } else if (dropResult.addedIndex !== null) {\n    removed ? emitTaskMove({\n      index: dropResult.addedIndex,\n      listIndex\n    }, removed, projectId) : dispatch({\n      type: PROJECT_TASK_MOVE,\n      payload: {\n        added: {\n          index: dropResult.addedIndex,\n          listIndex\n        },\n        removed: false\n      }\n    });\n  }\n};\nexport const projectListMove = (removedIndex, addedIndex) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      lists\n    }\n  } = getState();\n  const listsCopy = Object.assign({}, lists);\n  const [list] = listsCopy.lists.splice(removedIndex, 1);\n  listsCopy.lists.splice(addedIndex, 0, list);\n  dispatch({\n    type: PROJECT_DATA_UPDATE_LISTS,\n    payload: listsCopy\n  });\n  socket.emit('list-move', {\n    addedIndex,\n    removedIndex,\n    projectId: lists.projectId\n  });\n};\nexport const projectTaskArchive = (taskId, projectId, taskIndex, listIndex) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      lists\n    },\n    projectSetTask: {\n      task: taskOpened\n    }\n  } = getState();\n  getTaskIndexes(lists.lists, taskIndex, listIndex, taskId, (currentListIndex, currentTaskIndex) => {\n    const listsCopy = deepcopy(lists);\n    const [task] = listsCopy.lists[currentListIndex].tasks.splice(currentTaskIndex, 1);\n    task.archived = true;\n    listsCopy.archivedTasks.unshift(task);\n    dispatch({\n      type: PROJECT_DATA_UPDATE_LISTS,\n      payload: listsCopy\n    });\n    if (taskOpened && taskOpened._id === taskId) dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: {\n        ...taskOpened,\n        archived: true\n      }\n    });\n    socket.emit('task-archive', {\n      taskId,\n      projectId,\n      listIndex: currentListIndex\n    });\n  });\n};\nexport const projectTasksArchive = (listIndex, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      lists\n    }\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  const tasks = listsCopy.lists[listIndex].tasks.splice(0, listsCopy.lists[listIndex].tasks.length);\n  if (tasks.length > 0) {\n    const archivedTasks = tasks.map(task => {\n      task.archived = true;\n      return task;\n    });\n    listsCopy.archivedTasks = [...archivedTasks, ...listsCopy.archivedTasks];\n  }\n  dispatch({\n    type: PROJECT_DATA_UPDATE_LISTS,\n    payload: listsCopy\n  });\n  callback();\n  socket.emit('tasks-archive', {\n    projectId: lists.projectId,\n    listIndex\n  });\n};\nexport const projectListDelete = (listIndex, listId, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      lists\n    }\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  const [list] = listsCopy.lists.splice(listIndex, 1);\n  if (list.tasks.length > 0) {\n    const archivedTasks = list.tasks.map(task => {\n      task.archived = true;\n      return task;\n    });\n    listsCopy.archivedTasks = [...archivedTasks, ...listsCopy.archivedTasks];\n  }\n  dispatch({\n    type: PROJECT_DATA_UPDATE_LISTS,\n    payload: listsCopy\n  });\n  callback();\n  socket.emit('list-delete', {\n    projectId: lists.projectId,\n    listIndex,\n    listId\n  });\n};\nexport const projectTaskDelete = (taskId, taskIndex, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      lists\n    }\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  listsCopy.archivedTasks.splice(taskIndex, 1);\n  dispatch({\n    type: PROJECT_DATA_UPDATE_LISTS,\n    payload: listsCopy\n  });\n  callback();\n  socket.emit('task-delete', {\n    projectId: lists.projectId,\n    taskId,\n    taskIndex\n  });\n};\nexport const projectTaskTransfer = (taskId, taskIndex, listIndex, newListIndex, currentListId, newListId, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      lists\n    },\n    projectSetTask: {\n      task: taskOpened\n    }\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  let task;\n  // if listIndex is undefined then function is called from archived tasks\n  if (listIndex !== null) {\n    [task] = listsCopy.lists[listIndex].tasks.splice(taskIndex, 1);\n  } else {\n    if (taskOpened && taskOpened._id === taskId) dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: {\n        ...taskOpened,\n        archived: false\n      }\n    });\n    [task] = listsCopy.archivedTasks.splice(taskIndex, 1);\n    task.archived = false;\n  }\n  listsCopy.lists[newListIndex].tasks.push(task);\n  dispatch({\n    type: PROJECT_DATA_UPDATE_LISTS,\n    payload: listsCopy\n  });\n  callback();\n  socket.emit('task-transfer', {\n    projectId: lists.projectId,\n    taskId,\n    currentListId,\n    newListId\n  });\n};\nexport const projectTasksTransfer = (listIndex, newListIndex, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      lists\n    }\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  const tasks = listsCopy.lists[listIndex].tasks.splice(0, listsCopy.lists[listIndex].tasks.length);\n  listsCopy.lists[newListIndex].tasks = [...listsCopy.lists[newListIndex].tasks, ...tasks];\n  dispatch({\n    type: PROJECT_DATA_UPDATE_LISTS,\n    payload: listsCopy\n  });\n  callback();\n  socket.emit('tasks-transfer', {\n    projectId: lists.projectId,\n    listIndex,\n    newListIndex\n  });\n};\nexport const findUsersToInvite = userData => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PROJECT_FIND_USERS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      },\n      projectGetData: {\n        project\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(userInfo.token)\n      }\n    };\n\n    // eslint-disable-next-line\n    const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const isEmail = regex.test(userData.toLowerCase());\n    const {\n      data\n    } = await axios.post(\"/api/users/find/\".concat(project._id), {\n      userData,\n      isEmail\n    }, config);\n    dispatch({\n      type: PROJECT_FIND_USERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROJECT_FIND_USERS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const sendProjectInvitations = (users, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      project\n    }\n  } = getState();\n  socket.emit('project-invite-users', {\n    projectId: project._id,\n    users\n  }, callback);\n};\nexport const updateUserPermissions = (userId, permissions, projectId, handleClose) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    }\n  } = getState();\n  socket.emit('project-user-permissions-update', {\n    projectId,\n    userId,\n    newPermissions: permissions === 2 ? 1 : permissions === 1 && 2\n  }, handleClose);\n};\nexport const removeUserFromProject = (userId, projectId, handleClose) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      project\n    }\n  } = getState();\n  if (project.creatorId !== userId) {\n    socket.emit('project-user-remove', {\n      projectId,\n      userId\n    }, handleClose);\n  }\n};\nexport const setTask = (projectId, taskId) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PROJECT_SET_TASK_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        // 'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(userInfo.token)\n      }\n    };\n    const {\n      data\n    } = await axios.get(\"/api/projects/getTask/\".concat(projectId, \"/\").concat(taskId), config);\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROJECT_SET_TASK_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const taskFieldUpdate = (taskId, projectId, updatedData, fieldName, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    }\n  } = getState();\n  socket.emit('task-field-update', {\n    taskId,\n    projectId,\n    updatedData,\n    fieldName\n  }, callback);\n};\nexport const taskUsersUpdate = (taskId, projectId, newUsers, removedUsers, addedUsers, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    }\n  } = getState();\n  socket.emit('task-users-update', {\n    taskId,\n    projectId,\n    newUsers,\n    removedUsers,\n    addedUsers\n  }, callback);\n};\nexport const updateLabels = (taskId, projectId, newLabels, listIndex, taskIndex) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      lists\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  getTaskIndexes(listsCopy.lists, listIndex, taskIndex, taskId, (newListIndex, newTaskIndex) => {\n    listsCopy.lists[newListIndex].tasks[newTaskIndex].labels = newLabels;\n    dispatch({\n      type: PROJECT_DATA_UPDATE_LISTS,\n      payload: listsCopy\n    });\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: {\n        ...task,\n        labels: newLabels\n      }\n    });\n  });\n  socket.emit('task-field-update', {\n    taskId,\n    projectId,\n    updatedData: newLabels,\n    fieldName: 'labels'\n  });\n};\nexport const createLabel = (listIndex, taskIndex, taskId, label, callback) => (dispatch, getState) => {\n  const {\n    projectGetData: {\n      lists,\n      labels\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  getTaskIndexes(listsCopy.lists, listIndex, taskIndex, taskId, (newListIndex, newTaskIndex) => {\n    listsCopy.lists[newListIndex].tasks[newTaskIndex].labels.push(label._id);\n    labels.labels[label._id] = label;\n    labels.labelIds.push(label._id);\n    dispatch({\n      type: PROJECT_DATA_UPDATE_LABELS,\n      payload: labels\n    });\n    if (task._id === taskId) {\n      dispatch({\n        type: PROJECT_SET_TASK_SUCCESS,\n        payload: {\n          ...task,\n          labels: [...task.labels, label._id]\n        }\n      });\n      callback();\n    }\n    dispatch({\n      type: PROJECT_DATA_UPDATE_LISTS,\n      payload: listsCopy\n    });\n  });\n};\nexport const deleteLabel = (labelId, callback) => (dispatch, getState) => {\n  const {\n    projectGetData: {\n      labels\n    },\n    socketConnection: {\n      socket\n    }\n  } = getState();\n  delete labels.labels[labelId];\n  labels.labelIds = labels.labelIds.filter(id => id !== labelId);\n  dispatch({\n    type: PROJECT_DATA_UPDATE_LABELS,\n    payload: labels\n  });\n  callback();\n  socket.emit('label-delete', {\n    projectId: labels.projectId,\n    labelId\n  });\n};\nexport const editLabel = (labelId, title, color, callback) => (dispatch, getState) => {\n  const {\n    projectGetData: {\n      labels\n    },\n    socketConnection: {\n      socket\n    }\n  } = getState();\n  labels.labels[labelId] = {\n    ...labels.labels[labelId],\n    title,\n    color\n  };\n  dispatch({\n    type: PROJECT_DATA_UPDATE_LABELS,\n    payload: labels\n  });\n  callback();\n  socket.emit('label-edit', {\n    projectId: labels.projectId,\n    title,\n    color,\n    labelId\n  });\n};\nexport const createToDoList = (taskId, projectId, title, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    }\n  } = getState();\n  socket.emit('add-to-do-list', {\n    projectId,\n    title,\n    taskId\n  }, callback);\n};\nexport const updateToDoListTitle = (taskId, projectId, listId, listIndex, title, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  if (task && task._id === taskId) {\n    task.toDoLists.lists[listIndex].title = title;\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: task\n    });\n    callback();\n  }\n  socket.emit('update-to-do-list-title', {\n    projectId,\n    title,\n    listId,\n    taskId\n  });\n};\nexport const updateToDoListVisibility = (listId, visibility) => (dispatch, getState) => {\n  const {\n    projectToDoVisibility: {\n      listIds\n    }\n  } = getState();\n  if (visibility) listIds.push(listId);else {\n    const idIndex = listIds.indexOf(listId);\n    listIds.splice(idIndex, 1);\n  }\n  dispatch({\n    type: PROJECT_TODO_VISIBILITY_UPDATE,\n    payload: listIds\n  });\n  localStorage.setItem('toDoListIds', JSON.stringify(listIds));\n};\nexport const deleteToDoList = (taskId, projectId, listId, listIndex, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  if (task && task._id === taskId) {\n    const [toDoList] = task.toDoLists.lists.splice(listIndex, 1);\n    task.toDoLists.totalTasks -= toDoList.tasks.length;\n    task.toDoLists.tasksCompleted -= toDoList.tasksCompleted;\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: task\n    });\n    callback();\n  }\n  socket.emit('delete-to-do-list', {\n    taskId,\n    projectId,\n    listId\n  });\n};\nexport const addToDoTask = (taskId, toDoListId, toDoListIndex, projectId, title, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  socket.emit('add-to-do-task', {\n    taskId,\n    projectId,\n    title,\n    toDoListId\n  }, toDoTask => {\n    if (task && task._id === taskId) {\n      task.toDoLists.lists[toDoListIndex].tasks.push(toDoTask);\n      task.toDoLists.totalTasks += 1;\n      dispatch({\n        type: PROJECT_SET_TASK_SUCCESS,\n        payload: task\n      });\n      callback();\n    }\n  });\n};\nexport const updateToDoTaskProgress = (taskId, toDoListId, toDoListIndex, toDoTaskId, toDoTaskIndex, projectId, completed) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  if (task && task._id === taskId) {\n    task.toDoLists.lists[toDoListIndex].tasks[toDoTaskIndex].finished = completed;\n    if (completed) {\n      task.toDoLists.tasksFinished++;\n      task.toDoLists.lists[toDoListIndex].tasksFinished++;\n    } else {\n      task.toDoLists.tasksFinished--;\n      task.toDoLists.lists[toDoListIndex].tasksFinished--;\n    }\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: task\n    });\n  }\n  socket.emit('update-to-do-task-progress', {\n    taskId,\n    toDoTaskId,\n    toDoListId,\n    projectId,\n    completed\n  });\n};\nexport const updateToDoTaskTitle = (taskId, toDoListId, toDoListIndex, toDoTaskId, toDoTaskIndex, projectId, title, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  if (task && task._id === taskId) {\n    task.toDoLists.lists[toDoListIndex].tasks[toDoTaskIndex].title = title;\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: task\n    });\n    callback();\n  }\n  socket.emit('update-to-do-task-title', {\n    taskId,\n    toDoTaskId,\n    toDoListId,\n    projectId,\n    title\n  });\n};\nexport const deleteToDoTask = (taskId, toDoListId, toDoListIndex, toDoTaskId, toDoTaskIndex, projectId, completed) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  if (task && task._id === taskId) {\n    task.toDoLists.lists[toDoListIndex].tasks.splice(toDoTaskIndex, 1);\n    task.toDoLists.lists.totalTasks -= 1;\n    if (completed) {\n      task.toDoLists.lists.tasksCompleted -= 1;\n      task.toDoLists.lists[toDoListIndex].tasksFinished -= 1;\n    }\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: task\n    });\n  }\n  socket.emit('delete-to-do-task', {\n    taskId,\n    toDoTaskId,\n    toDoListId,\n    projectId,\n    completed\n  });\n};\nexport const addComment = (taskId, projectId, comment, callback) => (dispatch, getState) => {\n  const {\n    userLogin: {\n      userInfo\n    },\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  socket.emit('add-comment', {\n    taskId,\n    projectId,\n    comment\n  }, createdComment => {\n    if (task && task._id === taskId) {\n      createdComment.user = {\n        _id: userInfo._id,\n        username: userInfo.username,\n        profilePicture: userInfo.profilePicture\n      };\n      task.comments.unshift(createdComment);\n      dispatch({\n        type: PROJECT_SET_TASK_SUCCESS,\n        payload: task\n      });\n      callback();\n    }\n  });\n};\nexport const editComment = (taskId, projectId, commentId, newComment, commentIndex, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  if (task && task._id === taskId) {\n    task.comments[commentIndex].comment = newComment;\n    task.comments[commentIndex].updatedAt = new Date();\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: task\n    });\n    callback();\n  }\n  socket.emit('edit-comment', {\n    taskId,\n    projectId,\n    commentId,\n    newComment\n  });\n};\nexport const deleteComment = (taskId, projectId, commentId, commentIndex, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    }\n  } = getState();\n  if (task && task._id === taskId) {\n    task.comments.splice(commentIndex, 1);\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: task\n    });\n    callback();\n  }\n  socket.emit('delete-comment', {\n    taskId,\n    projectId,\n    commentId\n  });\n};\nexport const copyTask = (projectId, taskId, newListId, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    }\n  } = getState();\n  socket.emit('copy-task', {\n    taskId,\n    projectId,\n    newListId\n  }, callback);\n};\nexport const updateTaskWatch = (taskId, userId, isWatching, taskIndex, listIndex) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectSetTask: {\n      task\n    },\n    projectGetData: {\n      lists\n    }\n  } = getState();\n  const updateUsersWatching = (listIndex, taskIndex, lists, task) => {\n    if (isWatching) {\n      const userIndex = task.usersWatching.indexOf(userId);\n      if (userIndex > -1) {\n        task.usersWatching.splice(userIndex, 1);\n        if (listIndex) {\n          lists.lists[listIndex].tasks[taskIndex].usersWatching.splice(userIndex, 1);\n        } else {\n          lists.archivedTasks[taskIndex].usersWatching.splice(userIndex, 1);\n        }\n      }\n    } else {\n      task.usersWatching.push(userId);\n      if (listIndex) {\n        lists.lists[listIndex].tasks[taskIndex].usersWatching.push(userId);\n      } else {\n        lists.archivedTasks[taskIndex].usersWatching.push(userId);\n      }\n    }\n    dispatch({\n      type: PROJECT_DATA_UPDATE_LISTS,\n      payload: lists\n    });\n    dispatch({\n      type: PROJECT_SET_TASK_SUCCESS,\n      payload: task\n    });\n  };\n  if (listIndex) {\n    getTaskIndexes(lists.lists, taskIndex, listIndex, taskId, (currentListIndex, currentTaskIndex) => {\n      const taskClone = deepcopy(task);\n      updateUsersWatching(currentListIndex, currentTaskIndex, lists, taskClone);\n    });\n  } else {\n    const taskClone = deepcopy(task);\n    updateUsersWatching(null, taskIndex, lists, taskClone);\n  }\n  socket.emit('task-watch', {\n    taskId,\n    isWatching\n  });\n};\nexport const sendMessage = (message, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    },\n    projectGetData: {\n      project: {\n        _id: projectId\n      }\n    },\n    userLogin: {\n      userInfo: {\n        username,\n        profilePicture\n      }\n    }\n  } = getState();\n  dispatch({\n    type: PROJECT_RESET_NEW_MESSAGE\n  });\n  socket.emit('send-message', {\n    projectId,\n    message,\n    username,\n    profilePicture\n  }, callback);\n};\nexport const deleteProject = (projectId, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: {\n      socket\n    }\n  } = getState();\n  socket.emit('delete-project', {\n    projectId\n  }, callback);\n};","map":{"version":3,"names":["PROJECT_CREATE_FAIL","PROJECT_CREATE_REQUEST","PROJECT_CREATE_SUCCESS","PROJECT_DATA_FAIL","PROJECT_DATA_MOVE_TASK","PROJECT_DATA_REQUEST","PROJECT_DATA_SUCCESS","PROJECT_DATA_UPDATE_LABELS","PROJECT_DATA_UPDATE_LISTS","PROJECT_FIND_USERS_FAIL","PROJECT_FIND_USERS_REQUEST","PROJECT_FIND_USERS_SUCCESS","PROJECT_RESET_NEW_MESSAGE","PROJECT_SET_CURRENT","PROJECT_SET_MESSAGES","PROJECT_SET_TASK_FAIL","PROJECT_SET_TASK_REQUEST","PROJECT_SET_TASK_SUCCESS","PROJECT_TASK_MOVE","PROJECT_TASK_MOVE_RESET","PROJECT_TODO_VISIBILITY_UPDATE","USER_DATA_UPDATE","BACKGROUND_COLORS","axios","deepcopy","getTaskIndexes","createProject","title","callback","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","concat","token","background","Math","floor","random","data","post","project","_id","userInfoClone","Object","assign","projectsCreated","push","projectsThemes","payload","error","response","message","getProjectData","projectId","prevProjectId","socketConnection","socket","emit","room","labels","lists","messages","get","projectTaskMove","dropResult","listIndex","task","added","removed","emitTaskMove","taskId","removedIndex","addedIndex","index","projectListMove","projectGetData","listsCopy","list","splice","projectTaskArchive","taskIndex","projectSetTask","taskOpened","currentListIndex","currentTaskIndex","tasks","archived","archivedTasks","unshift","projectTasksArchive","length","map","projectListDelete","listId","projectTaskDelete","projectTaskTransfer","newListIndex","currentListId","newListId","projectTasksTransfer","findUsersToInvite","userData","regex","isEmail","test","toLowerCase","sendProjectInvitations","users","updateUserPermissions","userId","permissions","handleClose","newPermissions","removeUserFromProject","creatorId","setTask","taskFieldUpdate","updatedData","fieldName","taskUsersUpdate","newUsers","removedUsers","addedUsers","updateLabels","newLabels","newTaskIndex","createLabel","label","labelIds","deleteLabel","labelId","filter","id","editLabel","color","createToDoList","updateToDoListTitle","toDoLists","updateToDoListVisibility","visibility","projectToDoVisibility","listIds","idIndex","indexOf","localStorage","setItem","JSON","stringify","deleteToDoList","toDoList","totalTasks","tasksCompleted","addToDoTask","toDoListId","toDoListIndex","toDoTask","updateToDoTaskProgress","toDoTaskId","toDoTaskIndex","completed","finished","tasksFinished","updateToDoTaskTitle","deleteToDoTask","addComment","comment","createdComment","user","username","profilePicture","comments","editComment","commentId","newComment","commentIndex","updatedAt","Date","deleteComment","copyTask","updateTaskWatch","isWatching","updateUsersWatching","userIndex","usersWatching","taskClone","sendMessage","deleteProject"],"sources":["/Users/ozzyozmencelik/Projects/project-management/frontend/src/redux/actions/projectActions.js"],"sourcesContent":["import {\n  PROJECT_CREATE_FAIL,\n  PROJECT_CREATE_REQUEST,\n  PROJECT_CREATE_SUCCESS,\n  PROJECT_DATA_FAIL,\n  PROJECT_DATA_MOVE_TASK,\n  PROJECT_DATA_REQUEST,\n  PROJECT_DATA_SUCCESS,\n  PROJECT_DATA_UPDATE_LABELS,\n  PROJECT_DATA_UPDATE_LISTS,\n  PROJECT_FIND_USERS_FAIL,\n  PROJECT_FIND_USERS_REQUEST,\n  PROJECT_FIND_USERS_SUCCESS,\n  PROJECT_RESET_NEW_MESSAGE,\n  PROJECT_SET_CURRENT,\n  PROJECT_SET_MESSAGES,\n  PROJECT_SET_TASK_FAIL,\n  PROJECT_SET_TASK_REQUEST,\n  PROJECT_SET_TASK_SUCCESS,\n  PROJECT_TASK_MOVE,\n  PROJECT_TASK_MOVE_RESET,\n  PROJECT_TODO_VISIBILITY_UPDATE,\n} from '../constants/projectConstants';\nimport { USER_DATA_UPDATE } from '../constants/userConstants';\nimport { BACKGROUND_COLORS } from '../../util/colorsContants';\nimport axios from 'axios';\nimport deepcopy from 'deepcopy';\nimport { getTaskIndexes } from '../../util/utilFunctions';\n\nexport const createProject = (title, callback) => async (\n  dispatch,\n  getState\n) => {\n  try {\n    dispatch({ type: PROJECT_CREATE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n    // set random background for new project\n    const background =\n      BACKGROUND_COLORS[Math.floor(Math.random() * Math.floor(5))];\n\n    const { data } = await axios.post(\n      '/api/projects/',\n      { title, background },\n      config\n    );\n    callback(data.project._id);\n\n    const userInfoClone = Object.assign({}, userInfo);\n    userInfoClone.projectsCreated.push(data.project);\n    userInfoClone.projectsThemes[data.project._id] = { background };\n    // Update user's projects and set current project\n    dispatch({ type: USER_DATA_UPDATE, payload: userInfoClone });\n    dispatch({ type: PROJECT_SET_CURRENT, payload: data.project });\n    dispatch({ type: PROJECT_CREATE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: PROJECT_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const getProjectData = (projectId, prevProjectId) => async (\n  dispatch,\n  getState\n) => {\n  try {\n    dispatch({ type: PROJECT_DATA_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n      socketConnection: { socket },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    // join and leave socket's project board room\n    if (prevProjectId) socket.emit('disconnect-board', { room: prevProjectId });\n    socket.emit('join-board', { room: projectId });\n\n    const {\n      data: { project, labels, lists, messages },\n    } = await axios.get(`/api/projects/${projectId}`, config);\n\n    dispatch({\n      type: PROJECT_DATA_SUCCESS,\n      payload: { project, labels, lists },\n    });\n    dispatch({ type: PROJECT_SET_MESSAGES, payload: messages });\n  } catch (error) {\n    dispatch({\n      type: PROJECT_DATA_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Action used to emit to the socket 'task-move' event for other clients\n// and also prepare and dispatch data for local task move\nexport const projectTaskMove = (dropResult, listIndex, projectId, task) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectTaskMove: { added, removed },\n  } = getState();\n  const emitTaskMove = (added, removed) => {\n    dispatch({\n      type: PROJECT_DATA_MOVE_TASK,\n      payload: {\n        added,\n        removed,\n        task,\n      },\n    });\n    socket.emit('task-move', {\n      added,\n      removed,\n      taskId: task._id,\n      projectId,\n    });\n\n    dispatch({ type: PROJECT_TASK_MOVE_RESET });\n  };\n  if (dropResult.removedIndex !== null && dropResult.addedIndex !== null) {\n    emitTaskMove(\n      { index: dropResult.addedIndex, listIndex },\n      {\n        listIndex,\n        index: dropResult.removedIndex,\n      },\n      projectId\n    );\n  } else if (dropResult.removedIndex !== null) {\n    added\n      ? emitTaskMove(\n          added,\n          { listIndex, index: dropResult.removedIndex },\n          projectId\n        )\n      : dispatch({\n          type: PROJECT_TASK_MOVE,\n          payload: {\n            added: false,\n            removed: {\n              listIndex,\n              index: dropResult.removedIndex,\n            },\n          },\n        });\n  } else if (dropResult.addedIndex !== null) {\n    removed\n      ? emitTaskMove(\n          { index: dropResult.addedIndex, listIndex },\n          removed,\n          projectId\n        )\n      : dispatch({\n          type: PROJECT_TASK_MOVE,\n          payload: {\n            added: { index: dropResult.addedIndex, listIndex },\n            removed: false,\n          },\n        });\n  }\n};\nexport const projectListMove = (removedIndex, addedIndex) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { lists },\n  } = getState();\n  const listsCopy = Object.assign({}, lists);\n  const [list] = listsCopy.lists.splice(removedIndex, 1);\n  listsCopy.lists.splice(addedIndex, 0, list);\n  dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n  socket.emit('list-move', {\n    addedIndex,\n    removedIndex,\n    projectId: lists.projectId,\n  });\n};\n\nexport const projectTaskArchive = (taskId, projectId, taskIndex, listIndex) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { lists },\n    projectSetTask: { task: taskOpened },\n  } = getState();\n\n  getTaskIndexes(\n    lists.lists,\n    taskIndex,\n    listIndex,\n    taskId,\n    (currentListIndex, currentTaskIndex) => {\n      const listsCopy = deepcopy(lists);\n      const [task] = listsCopy.lists[currentListIndex].tasks.splice(\n        currentTaskIndex,\n        1\n      );\n      task.archived = true;\n      listsCopy.archivedTasks.unshift(task);\n      dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n      if (taskOpened && taskOpened._id === taskId)\n        dispatch({\n          type: PROJECT_SET_TASK_SUCCESS,\n          payload: { ...taskOpened, archived: true },\n        });\n      socket.emit('task-archive', {\n        taskId,\n        projectId,\n        listIndex: currentListIndex,\n      });\n    }\n  );\n};\n\nexport const projectTasksArchive = (listIndex, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { lists },\n  } = getState();\n\n  const listsCopy = deepcopy(lists);\n  const tasks = listsCopy.lists[listIndex].tasks.splice(\n    0,\n    listsCopy.lists[listIndex].tasks.length\n  );\n  if (tasks.length > 0) {\n    const archivedTasks = tasks.map((task) => {\n      task.archived = true;\n      return task;\n    });\n    listsCopy.archivedTasks = [...archivedTasks, ...listsCopy.archivedTasks];\n  }\n  dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n  callback();\n\n  socket.emit('tasks-archive', {\n    projectId: lists.projectId,\n    listIndex,\n  });\n};\n\nexport const projectListDelete = (listIndex, listId, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { lists },\n  } = getState();\n\n  const listsCopy = deepcopy(lists);\n  const [list] = listsCopy.lists.splice(listIndex, 1);\n  if (list.tasks.length > 0) {\n    const archivedTasks = list.tasks.map((task) => {\n      task.archived = true;\n      return task;\n    });\n    listsCopy.archivedTasks = [...archivedTasks, ...listsCopy.archivedTasks];\n  }\n  dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n  callback();\n\n  socket.emit('list-delete', {\n    projectId: lists.projectId,\n    listIndex,\n    listId,\n  });\n};\n\nexport const projectTaskDelete = (taskId, taskIndex, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { lists },\n  } = getState();\n\n  const listsCopy = deepcopy(lists);\n  listsCopy.archivedTasks.splice(taskIndex, 1);\n  dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n  callback();\n\n  socket.emit('task-delete', {\n    projectId: lists.projectId,\n    taskId,\n    taskIndex,\n  });\n};\n\nexport const projectTaskTransfer = (\n  taskId,\n  taskIndex,\n  listIndex,\n  newListIndex,\n  currentListId,\n  newListId,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { lists },\n    projectSetTask: { task: taskOpened },\n  } = getState();\n\n  const listsCopy = deepcopy(lists);\n  let task;\n  // if listIndex is undefined then function is called from archived tasks\n  if (listIndex !== null) {\n    [task] = listsCopy.lists[listIndex].tasks.splice(taskIndex, 1);\n  } else {\n    if (taskOpened && taskOpened._id === taskId)\n      dispatch({\n        type: PROJECT_SET_TASK_SUCCESS,\n        payload: { ...taskOpened, archived: false },\n      });\n    [task] = listsCopy.archivedTasks.splice(taskIndex, 1);\n    task.archived = false;\n  }\n  listsCopy.lists[newListIndex].tasks.push(task);\n  dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n  callback();\n\n  socket.emit('task-transfer', {\n    projectId: lists.projectId,\n    taskId,\n    currentListId,\n    newListId,\n  });\n};\n\nexport const projectTasksTransfer = (listIndex, newListIndex, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { lists },\n  } = getState();\n\n  const listsCopy = deepcopy(lists);\n  const tasks = listsCopy.lists[listIndex].tasks.splice(\n    0,\n    listsCopy.lists[listIndex].tasks.length\n  );\n  listsCopy.lists[newListIndex].tasks = [\n    ...listsCopy.lists[newListIndex].tasks,\n    ...tasks,\n  ];\n  dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n  callback();\n  socket.emit('tasks-transfer', {\n    projectId: lists.projectId,\n    listIndex,\n    newListIndex,\n  });\n};\n\nexport const findUsersToInvite = (userData) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: PROJECT_FIND_USERS_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n      projectGetData: { project },\n    } = getState();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    // eslint-disable-next-line\n    const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const isEmail = regex.test(userData.toLowerCase());\n\n    const { data } = await axios.post(\n      `/api/users/find/${project._id}`,\n      { userData, isEmail },\n      config\n    );\n    dispatch({ type: PROJECT_FIND_USERS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: PROJECT_FIND_USERS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const sendProjectInvitations = (users, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { project },\n  } = getState();\n\n  socket.emit(\n    'project-invite-users',\n    {\n      projectId: project._id,\n      users,\n    },\n    callback\n  );\n};\n\nexport const updateUserPermissions = (\n  userId,\n  permissions,\n  projectId,\n  handleClose\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n  } = getState();\n\n  socket.emit(\n    'project-user-permissions-update',\n    {\n      projectId,\n      userId,\n      newPermissions: permissions === 2 ? 1 : permissions === 1 && 2,\n    },\n    handleClose\n  );\n};\n\nexport const removeUserFromProject = (userId, projectId, handleClose) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { project },\n  } = getState();\n\n  if (project.creatorId !== userId) {\n    socket.emit(\n      'project-user-remove',\n      {\n        projectId,\n        userId,\n      },\n      handleClose\n    );\n  }\n};\n\nexport const setTask = (projectId, taskId) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: PROJECT_SET_TASK_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        // 'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(\n      `/api/projects/getTask/${projectId}/${taskId}`,\n      config\n    );\n\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: PROJECT_SET_TASK_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const taskFieldUpdate = (\n  taskId,\n  projectId,\n  updatedData,\n  fieldName,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n  } = getState();\n  socket.emit(\n    'task-field-update',\n    { taskId, projectId, updatedData, fieldName },\n    callback\n  );\n};\n\nexport const taskUsersUpdate = (\n  taskId,\n  projectId,\n  newUsers,\n  removedUsers,\n  addedUsers,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n  } = getState();\n  socket.emit(\n    'task-users-update',\n    { taskId, projectId, newUsers, removedUsers, addedUsers },\n    callback\n  );\n};\n\nexport const updateLabels = (\n  taskId,\n  projectId,\n  newLabels,\n  listIndex,\n  taskIndex\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: { lists },\n    projectSetTask: { task },\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  getTaskIndexes(\n    listsCopy.lists,\n    listIndex,\n    taskIndex,\n    taskId,\n    (newListIndex, newTaskIndex) => {\n      listsCopy.lists[newListIndex].tasks[newTaskIndex].labels = newLabels;\n      dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n      dispatch({\n        type: PROJECT_SET_TASK_SUCCESS,\n        payload: { ...task, labels: newLabels },\n      });\n    }\n  );\n\n  socket.emit('task-field-update', {\n    taskId,\n    projectId,\n    updatedData: newLabels,\n    fieldName: 'labels',\n  });\n};\n\nexport const createLabel = (listIndex, taskIndex, taskId, label, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    projectGetData: { lists, labels },\n    projectSetTask: { task },\n  } = getState();\n  const listsCopy = deepcopy(lists);\n  getTaskIndexes(\n    listsCopy.lists,\n    listIndex,\n    taskIndex,\n    taskId,\n    (newListIndex, newTaskIndex) => {\n      listsCopy.lists[newListIndex].tasks[newTaskIndex].labels.push(label._id);\n      labels.labels[label._id] = label;\n      labels.labelIds.push(label._id);\n      dispatch({ type: PROJECT_DATA_UPDATE_LABELS, payload: labels });\n      if (task._id === taskId) {\n        dispatch({\n          type: PROJECT_SET_TASK_SUCCESS,\n          payload: { ...task, labels: [...task.labels, label._id] },\n        });\n        callback();\n      }\n      dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: listsCopy });\n    }\n  );\n};\n\nexport const deleteLabel = (labelId, callback) => (dispatch, getState) => {\n  const {\n    projectGetData: { labels },\n    socketConnection: { socket },\n  } = getState();\n  delete labels.labels[labelId];\n  labels.labelIds = labels.labelIds.filter((id) => id !== labelId);\n  dispatch({ type: PROJECT_DATA_UPDATE_LABELS, payload: labels });\n  callback();\n  socket.emit('label-delete', { projectId: labels.projectId, labelId });\n};\n\nexport const editLabel = (labelId, title, color, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    projectGetData: { labels },\n    socketConnection: { socket },\n  } = getState();\n  labels.labels[labelId] = {\n    ...labels.labels[labelId],\n    title,\n    color,\n  };\n  dispatch({ type: PROJECT_DATA_UPDATE_LABELS, payload: labels });\n  callback();\n\n  socket.emit('label-edit', {\n    projectId: labels.projectId,\n    title,\n    color,\n    labelId,\n  });\n};\n\nexport const createToDoList = (taskId, projectId, title, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n  } = getState();\n\n  socket.emit(\n    'add-to-do-list',\n    {\n      projectId,\n      title,\n      taskId,\n    },\n    callback\n  );\n};\n\nexport const updateToDoListTitle = (\n  taskId,\n  projectId,\n  listId,\n  listIndex,\n  title,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  if (task && task._id === taskId) {\n    task.toDoLists.lists[listIndex].title = title;\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n    callback();\n  }\n\n  socket.emit('update-to-do-list-title', {\n    projectId,\n    title,\n    listId,\n    taskId,\n  });\n};\n\nexport const updateToDoListVisibility = (listId, visibility) => (\n  dispatch,\n  getState\n) => {\n  const {\n    projectToDoVisibility: { listIds },\n  } = getState();\n\n  if (visibility) listIds.push(listId);\n  else {\n    const idIndex = listIds.indexOf(listId);\n    listIds.splice(idIndex, 1);\n  }\n  dispatch({ type: PROJECT_TODO_VISIBILITY_UPDATE, payload: listIds });\n  localStorage.setItem('toDoListIds', JSON.stringify(listIds));\n};\n\nexport const deleteToDoList = (\n  taskId,\n  projectId,\n  listId,\n  listIndex,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  if (task && task._id === taskId) {\n    const [toDoList] = task.toDoLists.lists.splice(listIndex, 1);\n    task.toDoLists.totalTasks -= toDoList.tasks.length;\n    task.toDoLists.tasksCompleted -= toDoList.tasksCompleted;\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n    callback();\n  }\n  socket.emit('delete-to-do-list', {\n    taskId,\n    projectId,\n    listId,\n  });\n};\n\nexport const addToDoTask = (\n  taskId,\n  toDoListId,\n  toDoListIndex,\n  projectId,\n  title,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  socket.emit(\n    'add-to-do-task',\n    {\n      taskId,\n      projectId,\n      title,\n      toDoListId,\n    },\n    (toDoTask) => {\n      if (task && task._id === taskId) {\n        task.toDoLists.lists[toDoListIndex].tasks.push(toDoTask);\n        task.toDoLists.totalTasks += 1;\n        dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n        callback();\n      }\n    }\n  );\n};\n\nexport const updateToDoTaskProgress = (\n  taskId,\n  toDoListId,\n  toDoListIndex,\n  toDoTaskId,\n  toDoTaskIndex,\n  projectId,\n  completed\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  if (task && task._id === taskId) {\n    task.toDoLists.lists[toDoListIndex].tasks[\n      toDoTaskIndex\n    ].finished = completed;\n    if (completed) {\n      task.toDoLists.tasksFinished++;\n      task.toDoLists.lists[toDoListIndex].tasksFinished++;\n    } else {\n      task.toDoLists.tasksFinished--;\n      task.toDoLists.lists[toDoListIndex].tasksFinished--;\n    }\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n  }\n\n  socket.emit('update-to-do-task-progress', {\n    taskId,\n    toDoTaskId,\n    toDoListId,\n    projectId,\n    completed,\n  });\n};\n\nexport const updateToDoTaskTitle = (\n  taskId,\n  toDoListId,\n  toDoListIndex,\n  toDoTaskId,\n  toDoTaskIndex,\n  projectId,\n  title,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  if (task && task._id === taskId) {\n    task.toDoLists.lists[toDoListIndex].tasks[toDoTaskIndex].title = title;\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n    callback();\n  }\n\n  socket.emit('update-to-do-task-title', {\n    taskId,\n    toDoTaskId,\n    toDoListId,\n    projectId,\n    title,\n  });\n};\n\nexport const deleteToDoTask = (\n  taskId,\n  toDoListId,\n  toDoListIndex,\n  toDoTaskId,\n  toDoTaskIndex,\n  projectId,\n  completed\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  if (task && task._id === taskId) {\n    task.toDoLists.lists[toDoListIndex].tasks.splice(toDoTaskIndex, 1);\n    task.toDoLists.lists.totalTasks -= 1;\n    if (completed) {\n      task.toDoLists.lists.tasksCompleted -= 1;\n      task.toDoLists.lists[toDoListIndex].tasksFinished -= 1;\n    }\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n  }\n\n  socket.emit('delete-to-do-task', {\n    taskId,\n    toDoTaskId,\n    toDoListId,\n    projectId,\n    completed,\n  });\n};\n\nexport const addComment = (taskId, projectId, comment, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    userLogin: { userInfo },\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  socket.emit(\n    'add-comment',\n    {\n      taskId,\n      projectId,\n      comment,\n    },\n    (createdComment) => {\n      if (task && task._id === taskId) {\n        createdComment.user = {\n          _id: userInfo._id,\n          username: userInfo.username,\n          profilePicture: userInfo.profilePicture,\n        };\n        task.comments.unshift(createdComment);\n        dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n        callback();\n      }\n    }\n  );\n};\n\nexport const editComment = (\n  taskId,\n  projectId,\n  commentId,\n  newComment,\n  commentIndex,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  if (task && task._id === taskId) {\n    task.comments[commentIndex].comment = newComment;\n    task.comments[commentIndex].updatedAt = new Date();\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n    callback();\n  }\n\n  socket.emit('edit-comment', {\n    taskId,\n    projectId,\n    commentId,\n    newComment,\n  });\n};\n\nexport const deleteComment = (\n  taskId,\n  projectId,\n  commentId,\n  commentIndex,\n  callback\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n  } = getState();\n\n  if (task && task._id === taskId) {\n    task.comments.splice(commentIndex, 1);\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n    callback();\n  }\n\n  socket.emit('delete-comment', {\n    taskId,\n    projectId,\n    commentId,\n  });\n};\n\nexport const copyTask = (projectId, taskId, newListId, callback) => (\n  dispatch,\n  getState\n) => {\n  const {\n    socketConnection: { socket },\n  } = getState();\n  socket.emit(\n    'copy-task',\n    {\n      taskId,\n      projectId,\n      newListId,\n    },\n    callback\n  );\n};\n\nexport const updateTaskWatch = (\n  taskId,\n  userId,\n  isWatching,\n  taskIndex,\n  listIndex\n) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectSetTask: { task },\n    projectGetData: { lists },\n  } = getState();\n\n  const updateUsersWatching = (listIndex, taskIndex, lists, task) => {\n    if (isWatching) {\n      const userIndex = task.usersWatching.indexOf(userId);\n      if (userIndex > -1) {\n        task.usersWatching.splice(userIndex, 1);\n        if (listIndex) {\n          lists.lists[listIndex].tasks[taskIndex].usersWatching.splice(\n            userIndex,\n            1\n          );\n        } else {\n          lists.archivedTasks[taskIndex].usersWatching.splice(userIndex, 1);\n        }\n      }\n    } else {\n      task.usersWatching.push(userId);\n      if (listIndex) {\n        lists.lists[listIndex].tasks[taskIndex].usersWatching.push(userId);\n      } else {\n        lists.archivedTasks[taskIndex].usersWatching.push(userId);\n      }\n    }\n\n    dispatch({ type: PROJECT_DATA_UPDATE_LISTS, payload: lists });\n    dispatch({ type: PROJECT_SET_TASK_SUCCESS, payload: task });\n  };\n\n  if (listIndex) {\n    getTaskIndexes(\n      lists.lists,\n      taskIndex,\n      listIndex,\n      taskId,\n      (currentListIndex, currentTaskIndex) => {\n        const taskClone = deepcopy(task);\n        updateUsersWatching(\n          currentListIndex,\n          currentTaskIndex,\n          lists,\n          taskClone\n        );\n      }\n    );\n  } else {\n    const taskClone = deepcopy(task);\n    updateUsersWatching(null, taskIndex, lists, taskClone);\n  }\n\n  socket.emit('task-watch', {\n    taskId,\n    isWatching,\n  });\n};\n\nexport const sendMessage = (message, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n    projectGetData: {\n      project: { _id: projectId },\n    },\n    userLogin: {\n      userInfo: { username, profilePicture },\n    },\n  } = getState();\n  dispatch({ type: PROJECT_RESET_NEW_MESSAGE });\n  socket.emit(\n    'send-message',\n    {\n      projectId,\n      message,\n      username,\n      profilePicture,\n    },\n    callback\n  );\n};\n\nexport const deleteProject = (projectId, callback) => (dispatch, getState) => {\n  const {\n    socketConnection: { socket },\n  } = getState();\n\n  socket.emit(\n    'delete-project',\n    {\n      projectId,\n    },\n    callback\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}